{"version":3,"sources":["components/status/statuses.js","components/status/useStatus.js","components/status/index.js","components/status/useRefetch.js","components/useIssues.js","components/header/index.js","components/components/skeleton.js","components/components/component/statuses.js","components/components/component/status.js","components/components/component/useStatus.js","components/components/component/index.js","components/useDidMount.js","components/components/index.js","components/incidents/incidentTimeline/index.js","components/incidents/incident/index.js","components/incidents/skeleton.js","components/incidents/index.js","components/footer/index.js","components/subscribe/index.js","components/chart/SegmentChart.jsx","components/chart/index.js","components/App.js","serviceWorker.js","index.js"],"names":["message","backgroundColour","getComponentLabelPercent","components","label","filter","component","labels","find","componentLabel","name","length","StatusBar","styled","div","props","Status","h2","Reload","button","Code","code","loading","error","refetch","useState","status","setStatus","useEffect","statusSet","statuses","useStatus","updateTimeAgoDep","moment","Date","localStorage","getItem","fromNow","timeAgo","setTimeAgo","interval","setInterval","clearInterval","useRefetch","hasError","JSON","stringify","errors","onClick","results","setResults","setError","setLoading","fetchData","parse","fetch","process","then","response","json","data","setItem","catch","toString","Header","header","Logo","img","Title","h1","TitlePrime","span","src","alt","operational","colour","performanceIssues","partialOutage","majorOutage","unknown","Object","values","toLowerCase","Component","title","hasMounted","setHasMounted","sortComponents","a","b","useDidMount","sort","map","id","DotElement","Container","DotContainer","Dot","item","index","formatTimelineItem","anchorId","created_at","event","TimelineList","timelineItems","incident","setData","getData","url","axios","get","console","timeline_url","Incident","active","Details","Comment","Created","closed_at","format","toUpperCase","body","NoFound","incidents","Footer","Branding","visible","href","rel","target","FlexBox","Label","Button","primary","Input","input","inputColor","isError","emailRegex","RegExp","email","setEmail","emailInputError","setEmailInputError","handleSubscribeClick","isSubscribe","test","toast","resourcePath","baseUrl","put","success","log","htmlFor","placeholder","type","value","onChange","onKeyDown","key","SegmentContainer","IncidentSegment","IncidentSegmentInner","hasIncident","Segment","segment","tooltip","init","date","toDateString","incidentStr","join","formatIncidents","SegmentChart","segments","Uptime","ChartFooter","normalizeDate","setHours","TODAY","TODAY_DATE","getDate","incidentDays","day","newDay","setDate","incidentsToday","push","Math","round","reverse","uptime","ComponentsContainer","useIssues","componentsLoading","componentsError","componentsResults","componentsRefetch","incidentsLoading","incidentsError","incidentsResults","incidentsRefetch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fbd3f25d.chunk.js","sourcesContent":["export default {\n  operational: {\n    message: \"All Systems Operational\",\n    backgroundColour: \"#3da751\",\n  },\n  issues: {\n    message: \"Some systems are experiencing issues\",\n    backgroundColour: \"#4990e2\",\n  },\n  outage: {\n    message: \"Some systems are experiencing a major outage\",\n    backgroundColour: \"#d94430\",\n  },\n};\n","import { useState, useEffect } from \"react\";\nimport statuses from \"./statuses\";\n\nexport default (components) => {\n  const [status, setStatus] = useState();\n\n  useEffect(() => {\n    let statusSet = false;\n\n    if (getComponentLabelPercent(components, \"operational\") < 70) {\n      setStatus(statuses.issues);\n      statusSet = true;\n    }\n\n    if (getComponentLabelPercent(components, \"major outage\") > 0) {\n      setStatus(statuses.outage);\n      statusSet = true;\n    }\n\n    if (!statusSet) setStatus(statuses.operational);\n  }, [components]);\n\n  return [status];\n};\n\nconst getComponentLabelPercent = (components, label) =>\n  (components.filter((component) =>\n    component.labels.find((componentLabel) => componentLabel.name === label)\n  ).length *\n    100) /\n  components.length;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport useStatus from \"./useStatus\";\nimport useRefetch from \"./useRefetch\";\n\nconst StatusBar = styled.div`\n  background-color: ${(props) =>\n    props.backgroundColour ? props.backgroundColour : \"#b1b1b1\"};\n  color: white;\n  padding: 16px;\n  border-radius: 3px;\n  margin-bottom: 32px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-wrap: wrap;\n  transition: 0.3s;\n`;\n\nconst Status = styled.h2`\n  font-size: 20px;\n  margin: 0;\n  font-weight: normal;\n`;\n\nconst Reload = styled.button`\n  background-color: transparent;\n  color: white;\n  text-decoration: underline;\n  border: none;\n  cursor: pointer;\n  text-align: right;\n  padding: 0;\n`;\n\nconst Code = styled.code`\n  white-space: pre-wrap;\n  display: block;\n`;\n\n// TODO: change all systems status based on current status of all components\nexport default ({ loading, error, components, refetch }) => {\n  const [status] = useStatus(components);\n  const [timeAgo] = useRefetch(refetch, loading);\n\n  return (\n    <>\n      {error.hasError && (\n        <Code>\n          <div>An error occured</div>\n          <div>\n            You may have exceeded the rate limit. Try again in 1 hour to fetch\n            the latest data.\n          </div>\n          {JSON.stringify(error.errors, null, 3)}\n        </Code>\n      )}\n      <StatusBar backgroundColour={status?.backgroundColour}>\n        <Status>{status?.message}</Status>\n        <Reload onClick={refetch}>{loading ? \"reloading\" : timeAgo}</Reload>\n      </StatusBar>\n    </>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport moment from \"moment\";\n\nexport default (refetch, updateTimeAgoDep) => {\n  const [timeAgo, setTimeAgo] = useState(\n    moment(\n      new Date(localStorage.getItem(`issueStatusLastFetchcomponent`))\n    ).fromNow()\n  );\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (\n        new Date(localStorage.getItem(`issueStatusLastFetchcomponent`)) <\n        new Date() - 240000\n      ) {\n        refetch(() => {\n          setTimeAgo(\n            moment(\n              new Date(localStorage.getItem(`issueStatusLastFetchcomponent`))\n            ).fromNow()\n          );\n        });\n      } else {\n        setTimeAgo(\n          moment(\n            new Date(localStorage.getItem(`issueStatusLastFetchcomponent`))\n          ).fromNow()\n        );\n      }\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [refetch]);\n\n  useEffect(() => {\n    setTimeAgo(\n      moment(\n        new Date(localStorage.getItem(`issueStatusLastFetchcomponent`))\n      ).fromNow()\n    );\n  }, [updateTimeAgoDep]);\n\n  return [timeAgo];\n};\n","import { useState, useEffect } from \"react\";\n\nexport default (label) => {\n  const [results, setResults] = useState([]);\n  const [error, setError] = useState();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // GitHub rate limiting: 60 requests per hour/unauthenticated - fetches 15 times per hour / sending 30 requests (2 requests per fetch) and caches in localStorage\n    if (\n      new Date(localStorage.getItem(`issueStatusLastFetch${label}`)) <\n      new Date() - 240000\n    ) {\n      fetchData(setLoading, setError, setResults, label);\n    } else {\n      setResults(JSON.parse(localStorage.getItem(`issueStatus${label}`)));\n      setLoading(false);\n      setError();\n    }\n  }, [label]);\n\n  return [\n    loading,\n    error,\n    results || [],\n    () => fetchData(setLoading, setError, setResults, label),\n  ];\n};\n\nconst fetchData = (setLoading, setError, setResults, label) => {\n  setLoading(true);\n  fetch(\n    `https://api.github.com/repos/${process.env.REACT_APP_REPOSITORY}/issues?state=all&labels=issue status,${label}`\n  )\n    .then((response) => {\n      return response.json();\n    })\n    .then((data) => {\n      setError();\n      localStorage.setItem(`issueStatusLastFetch${label}`, new Date());\n      localStorage.setItem(`issueStatus${label}`, JSON.stringify(data));\n      setResults(data);\n      setLoading(false);\n    })\n    .catch((error) => {\n      setError(error.toString());\n      localStorage.setItem(`issueStatusLastFetch${label}`, new Date());\n      setResults(JSON.parse(localStorage.getItem(`issueStatus${label}`)));\n      setLoading(false);\n    });\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Header = styled.header`\n  margin-bottom: 16px;\n  background-color: black;\n  height: 30px;\n  padding: 10px;\n  display: flex;\n`;\n\nconst Logo = styled.img`\n  align-self: flex-start;\n`;\n\nconst Title = styled.h1`\n  width: 100%;\n  color: white;\n  font-family: \"Open Sans\", Helvetica, Arial, sans-serif;\n  font-weight: normal;\n  font-size: 28px;\n  align-self: center;\n  margin-left: -118px;\n  text-align: center;\n  letter-spacing: 5px;\n  line-height: 1.2em;\n`;\n\nconst TitlePrime = styled.span`\n  color: #b25d42;\n`;\n\nexport default () =>\n  process.env.REACT_APP_LOGO || process.env.REACT_APP_NAME ? (\n    <Header>\n      {process.env.REACT_APP_LOGO ? (\n        <Logo\n          src={process.env.REACT_APP_LOGO}\n          alt={process.env.REACT_APP_NAME}\n        />\n      ) : null}\n      <Title>\n        MasterMind <TitlePrime>Status</TitlePrime>\n      </Title>\n    </Header>\n  ) : null;\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  width: 100%;\n  height: 44px;\n  border-radius: 3px;\n  background-color: #f7f8f9;\n\n  :not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n","export default {\n  operational: {\n    name: \"Operational\",\n    colour: \"#247234\",\n    backgroundColour: \"rgba(61, 167, 81, 0.1)\",\n  },\n  performanceIssues: {\n    name: \"Performance Issues\",\n    colour: \"#2f5888\",\n    backgroundColour: \"rgba(73, 144, 226, 0.1)\",\n  },\n  partialOutage: {\n    name: \"Partial Outage\",\n    colour: \"#74582a\",\n    backgroundColour: \"rgba(255, 198, 103, 0.1)\",\n  },\n  majorOutage: {\n    name: \"Major Outage\",\n    colour: \"#8e3b31\",\n    backgroundColour: \"rgba(217, 68, 48, 0.1)\",\n  },\n  unknown: {\n    name: \"Unknown\",\n    colour: \"#6e6b6b\",\n    backgroundColour: \"rgba(177, 177, 177, 0.1)\",\n  },\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport useStatus from \"./useStatus\";\n\nconst Status = styled.div`\n  color: ${(props) => props.colour};\n  background-color: ${(props) => props.backgroundColour};\n  padding: 5px 12px;\n  border-radius: 16px;\n  font-size: 13px;\n  transition: 0.3s;\n`;\n\nexport default ({ labels }) => {\n  const [status] = useStatus(labels);\n\n  return (\n    <Status colour={status?.colour} backgroundColour={status?.backgroundColour}>\n      {status?.name}\n    </Status>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport statuses from \"./statuses\";\n\nexport default (labels) => {\n  const [status, setStatus] = useState();\n\n  useEffect(() => {\n    setStatus(\n      Object.values(statuses).find((status) =>\n        labels.find((label) => label.name === status.name.toLowerCase())\n      )\n    );\n  }, [labels]);\n\n  if (!status) setStatus(statuses.unknown);\n\n  return [status];\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Status from \"./status\";\n\nconst Component = styled.div`\n  background-color: #f7f8f9;\n  padding: 8px 16px;\n  border-radius: 3px;\n  justify-content: space-between;\n  align-items: center;\n  display: flex;\n\n  :not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n\nexport default ({ component }) => {\n  return (\n    <Component>\n      {component.title} <Status labels={component.labels} />\n    </Component>\n  );\n};\n","import { useEffect, useState } from \"react\";\n\nexport default () => {\n  const [hasMounted, setHasMounted] = useState();\n\n  useEffect(() => {\n    setHasMounted(true);\n  }, []);\n\n  return [hasMounted];\n};\n","import React from \"react\";\nimport Skeleton from \"./skeleton\";\nimport Component from \"./component\";\nimport useDidMount from \"../useDidMount\";\n\nconst sortComponents = ( a, b ) => {\n  if ( a.title < b.title ){\n    return -1;\n  }\n  if ( a.title > b.title ){\n    return 1;\n  }\n  return 0;\n}\n\nexport default ({ loading, components }) => {\n  const [hasMounted] = useDidMount();\n\n  return !loading || hasMounted ? (\n    components?.length > 0 ? (\n      components?.sort(sortComponents).map((component) => (\n        <Component key={component.id} component={component} />\n      ))\n    ) : (\n      <p>No Components found.</p>\n    )\n  ) : (\n    <>\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n    </>\n  );\n};\n","import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Tooltip } from \"react-tooltip\";\nimport \"react-tooltip/dist/react-tooltip.css\";\n\nconst DotElement = styled.span`\n  position: relative;\n  display: inline-block;\n  margin-top: 10px;\n  width: 50px;\n  margin: 10px 1px;\n  height: 5px;\n  background: #b25d42;\n  &::before {\n    content: \"\";\n    position: absolute;\n    z-index: 2;\n    right: -12px;\n    top: -12px;\n    height: 20px;\n    width: 20px;\n    background: white;\n    border: 5px solid #b25d42;\n    border-radius: 50%;\n  }\n`;\n\nconst Title = styled.h2`\n  font-size: 18px;\n`;\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nconst DotContainer = styled.div``;\n\nconst Dot = ({ item, index }) => {\n  return (\n    <DotContainer\n      id={`tooltip-timeline-data-html-${index}`}\n      data-tooltip-html={formatTimelineItem(item)}\n    >\n      <DotElement></DotElement>\n      <Tooltip anchorId={`tooltip-timeline-data-html-${index}`} />\n    </DotContainer>\n  );\n};\n\nconst formatTimelineItem = (item) => {\n  return `<div>${item.created_at}</div><div>${item.event}</div>`;\n};\n\nconst TimelineList = ({ timelineItems }) => {\n  return (\n    <>\n      <Title>timeline</Title>\n      <Container>\n        <span>created </span>\n        {timelineItems?.length > 0 ? (\n          timelineItems.map((item, index) => (\n            <Dot item={item} index={index} key={index}></Dot>\n          ))\n        ) : (\n          <></>\n        )}\n      </Container>\n    </>\n  );\n};\n\nexport default ({ incident }) => {\n  //   console.log(incident);\n\n  const [data, setData] = useState();\n\n  useEffect(() => {\n    const getData = async (url) => {\n      try {\n        const response = await axios.get(url);\n        // console.log(response.data);\n        setData(response.data);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    if (incident?.timeline_url) {\n      getData(incident.timeline_url);\n    }\n  }, [incident]);\n\n  return <TimelineList timelineItems={data} />;\n  //   return <>{JSON.stringify(data)}</>;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\nimport ReactMarkdown from \"react-markdown\";\nimport IncidentTimeline from \"../incidentTimeline\";\n\nconst Incident = styled.div`\n  transition: 0.3s;\n  border-left: 16px solid\n    ${(props) =>\n      props.active ? \"rgba(177, 177, 177,0.2)\" : \"rgba(73, 144, 226, 0.2)\"};\n  background-color: white;\n  border-radius: 3px;\n  padding: 16px;\n  box-shadow: 0px 0px 33px -32px rgba(0, 0, 0, 0.75);\n  margin-top: 8px;\n\n  :not(:last-child) {\n    margin-bottom: 16px;\n  }\n`;\n\nconst Details = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 3px;\n`;\n\nconst Title = styled.div`\n  margin-right: 16px;\n  font-weight: bold;\n  margin-bottom: 8px;\n  color: #1e1e1e;\n`;\n\nconst Comment = styled.div`\n  white-space: break-spaces;\n  color: #1e1e1e;\n`;\n\nconst Status = styled.div`\n  color: ${(props) => (props.active ? \"#6e6b6b\" : \"#2f5888\")};\n  background-color: ${(props) =>\n    props.active ? \"rgba(177, 177, 177, 0.1)\" : \"rgba(73, 144, 226, 0.1)\"};\n  padding: 5px 12px;\n  border-radius: 16px;\n  font-size: 13px;\n  transition: 0.3s;\n`;\n\nconst Created = styled.div`\n  font-size: 13px;\n  color: #6e6b6b;\n  font-weight: bold;\n`;\n\nexport default ({ incident }) => (\n  <Incident active={incident.closed_at}>\n    <Details>\n      <Created>\n        {moment(incident.created_at)\n          .format(\"MMMM Do YYYY, h:mm a\")\n          .toUpperCase()}\n      </Created>\n      <Status active={incident.closed_at}>\n        {incident.closed_at ? \"Closed\" : \"Active\"}\n      </Status>\n    </Details>\n    <Title>{incident.title}</Title>\n    <Comment>\n      <ReactMarkdown>{incident.body}</ReactMarkdown>\n      <IncidentTimeline incident={incident} />\n    </Comment>\n  </Incident>\n);\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  width: 100%;\n  height: 84px;\n  border-radius: 3px;\n  background-color: white;\n  box-shadow: 0px 0px 33px -32px rgba(0, 0, 0, 0.75);\n\n  :not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Incident from \"./incident\";\nimport Skeleton from \"./skeleton\";\nimport useDidMount from \"../useDidMount\";\n\nconst Container = styled.div`\n  margin: 32px auto 0 auto;\n  max-width: 1040px;\n`;\n\nconst Title = styled.div`\n  padding: 0 16px;\n  font-size: 20px;\n  margin-bottom: 16px;\n`;\n\nconst NoFound = styled.div`\n  margin: 0 8px;\n`;\n\nexport default ({ loading, incidents }) => {\n  const [hasMounted] = useDidMount();\n  return (\n    <Container>\n      <Title>Incidents</Title>\n      {!loading || hasMounted ? (\n        incidents?.length > 0 ? (\n          incidents?.map((incident) => (\n            <Incident key={incident.id} incident={incident} />\n          ))\n        ) : (\n          <NoFound>No Incidents found.</NoFound>\n        )\n      ) : (\n        <>\n          <Skeleton />\n          <Skeleton />\n          <Skeleton />\n        </>\n      )}\n    </Container>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Footer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 16px;\n`;\n\nconst Branding = styled.a`\n  color: #6e6b6b;\n  font-size: 13px;\n  text-decoration: none;\n  transition: 0.3s;\n  display: ${(props) => (props.visible ? \"block\" : \"none\")};\n\n  :hover {\n    opacity: 0.9;\n  }\n`;\n\nexport default () => (\n  <Footer>\n    <div></div>\n    <Branding\n      visible={process.env.REACT_APP_BRANDING !== \"false\"}\n      href=\"https://github.com/tadhglewis/issue-status\"\n      rel=\"noopener\"\n      target=\"_blank\"\n    >\n      Powered by Issue Status\n    </Branding>\n  </Footer>\n);\n","import axios from \"axios\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport toast, { Toaster } from \"react-hot-toast\";\n\nconst FlexBox = styled.div`\n  margin: 32px auto 0 auto;\n  max-width: 1040px;\n  justify-content: center;\n  display: flex;\n  align-items: center;\n  box-shadow: 0px 0px 33px -32px rgba(0, 0, 0, 0.75);\n  border-radius: 3px;\n  background-color: rgba(255, 255, 255, 0.67);\n  padding: 4px;\n`;\n\nconst Label = styled.label`\n  margin-right: 8px;\n  display: inline;\n`;\n\nconst Button = styled.button`\n  background: ${(props) => (props.primary ? \"green\" : \"white\")};\n  color: ${(props) => (props.primary ? \"white\" : \"gray\")};\n\n  font-size: 1em;\n  margin: 1em;\n  padding: 0.25em 1em;\n  border: 2px solid ${(props) => (props.primary ? \"green\" : \"gray\")};\n  border-radius: 3px;\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nconst Input = styled.input`\n  padding: 0.5em;\n  margin: 0.5em;\n  background: ${(props) => props.inputColor || \"white\"};\n  border: ${(props) =>\n    props.isError ? \"1px solid red\" : \"1px solid lightgray\"};\n  border-radius: 3px;\n`;\n\nexport default () => {\n  const emailRegex = new RegExp(\n    /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/\n  );\n\n  const [email, setEmail] = useState(\"\");\n  const [emailInputError, setEmailInputError] = useState(false);\n\n  const validateEmail = () => {\n    if (!emailRegex.test(email)) {\n      toast.error(\"Please enter a valid email address\");\n      setEmailInputError(true);\n      return false;\n    } else {\n      setEmailInputError(false);\n      return true;\n    }\n  };\n\n  const handleSubscribeClick = async (isSubscribe) => {\n    if (!validateEmail()) return;\n\n    const resourcePath = isSubscribe ? \"subscribe\" : \"unsubscribe\";\n    try {\n      const baseUrl =\n        process.env.REACT_APP_NOTIFICATION_SERVICE_BASEURL ??\n        \"http://localhost\";\n      const response = await axios.put(\n        `${baseUrl}/${resourcePath}?email=${email}`\n      );\n      toast.success(\"Subscription Updated\");\n      console.log(response);\n    } catch (err) {\n      toast.error(\"error :(\");\n      console.error(err);\n    }\n  };\n\n  const handleKeyDown = (event) => {\n    if (event.key === \"Enter\") {\n      handleSubscribeClick(true);\n    }\n  };\n\n  return (\n    <>\n      <div>\n        <Toaster />\n      </div>\n      <FlexBox>\n        <Label htmlFor=\"emailInput\">Subscribe to notifications:</Label>\n        <Input\n          placeholder=\"email@example.com\"\n          type=\"email\"\n          id=\"emailInput\"\n          value={email}\n          onChange={(event) => setEmail(event.target.value)}\n          isError={emailInputError}\n          onKeyDown={handleKeyDown}\n        />\n        <Button primary onClick={() => handleSubscribeClick(true)}>\n          Subscribe\n        </Button>\n        <Button onClick={() => handleSubscribeClick(false)}>Unsubscribe</Button>\n      </FlexBox>\n    </>\n  );\n};\n","import styled from \"styled-components\";\nimport { Tooltip } from \"react-tooltip\";\nimport \"react-tooltip/dist/react-tooltip.css\";\n\nconst SegmentContainer = styled.div`\n  display: flex;\n  position: relative;\n`;\n\nconst IncidentSegment = styled.div`\n  height: 30px;\n  background-color: rgb(35, 38, 39);\n  flex: 1;\n  padding: 0;\n  margin-right: 2px;\n  background: #ececec;\n  position: relative;\n`;\n\nconst IncidentSegmentInner = styled.div`\n  background: ;\n  background-color: ${(props) =>\n    props.hasIncident ? \"red\" : \"rgb(20, 184, 118)\"};\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n`;\n\nconst Segment = ({ segment, index }) => {\n  const formatIncidents = (incidents) => {\n    const init = `<div>${new Date(segment.date).toDateString()}</div><br />`;\n    let incidentStr = \"\";\n    if (!segment.incidents.length) {\n      incidentStr = `<div>No Incident</div>`;\n    } else {\n      incidentStr = incidents\n        .map((incident) => {\n          return `<div>${incident.title}</div>`;\n        })\n        .join(\"<br />\");\n    }\n    return `${init}${incidentStr}`;\n  };\n  const tooltip = formatIncidents(segment.incidents);\n  return (\n    <>\n      <IncidentSegment\n        id={`tooltip-anchor-data-html-${index}`}\n        data-tooltip-html={tooltip}\n      >\n        <IncidentSegmentInner hasIncident={segment.incidents.length} />\n      </IncidentSegment>\n      <Tooltip anchorId={`tooltip-anchor-data-html-${index}`} />\n    </>\n  );\n};\n\nexport default function SegmentChart({ segments }) {\n  return (\n    <SegmentContainer>\n      {segments.map((segment, index) => (\n        <Segment segment={segment} index={index} key={index} />\n      ))}\n    </SegmentContainer>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Skeleton from \"../components/skeleton\";\nimport useDidMount from \"../useDidMount\";\nimport SegmentChart from \"./SegmentChart\";\n\nconst Container = styled.div`\n  margin: 32px auto 0 auto;\n  max-width: 1040px;\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0px 0px 33px -32px rgba(0, 0, 0, 0.75);\n  border-radius: 3px;\n  background-color: white;\n  padding: 16px;\n`;\n\nconst Uptime = styled.div`\n  font-size: 24px;\n  margin-bottom: 16px;\n  display: flex;\n  align-self: center;\n  color: rgba(0, 0, 0, 0.75);\n`;\n\nconst ChartFooter = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst normalizeDate = (date) => {\n  return new Date(date).setHours(0, 0, 0, 0);\n};\n\nconst MAX_SEGMENT_DAYS = 60;\nconst TODAY = normalizeDate(new Date());\nconst TODAY_DATE = new Date(TODAY).getDate();\n\nexport default ({ loading, incidents }) => {\n  const [hasMounted] = useDidMount();\n\n  const process = (incidents) => {\n    const segments = [];\n    let incidentDays = 0;\n\n    for (let day = 0; day < MAX_SEGMENT_DAYS; day++) {\n      const newDay = normalizeDate(new Date().setDate(TODAY_DATE - day));\n      const incidentsToday = incidents.filter(\n        (incident) => normalizeDate(incident.created_at) === newDay\n      );\n      if (incidentsToday.length) incidentDays++;\n      segments.push({\n        date: newDay,\n        incidents: incidentsToday,\n      });\n    }\n    const uptime = Math.round(\n      ((MAX_SEGMENT_DAYS - incidentDays) / MAX_SEGMENT_DAYS) * 100\n    );\n    return [uptime, segments.reverse()];\n  };\n\n  const [uptime, segments] = process(incidents);\n\n  return (\n    <Container>\n      <Uptime>{uptime}% Uptime</Uptime>\n      {!loading || hasMounted ? (\n        <SegmentChart segments={segments} />\n      ) : (\n        <>\n          <Skeleton />\n          <Skeleton />\n          <Skeleton />\n        </>\n      )}\n      <ChartFooter>\n        <div>{MAX_SEGMENT_DAYS} days ago</div>\n        <div>today</div>\n      </ChartFooter>\n    </Container>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport Status from \"./status\";\nimport useIssues from \"./useIssues\";\nimport Header from \"./header\";\nimport Components from \"./components\";\nimport Incidents from \"./incidents\";\nimport Footer from \"./footer\";\nimport Subscribe from \"./subscribe\";\nimport Chart from \"./chart\";\n\nconst Container = styled.div`\n  max-width: 1008px;\n  padding: 16px;\n  margin: 16px auto;\n`;\n\nconst ComponentsContainer = styled.div`\n  box-shadow: 0px 0px 33px -32px rgba(0, 0, 0, 0.75);\n  border-radius: 3px;\n  background-color: white;\n  padding: 16px;\n`;\n\nexport default () => {\n  // loading, errors, results, refetch\n  const [\n    componentsLoading,\n    componentsError,\n    componentsResults,\n    componentsRefetch,\n  ] = useIssues(\"component\");\n  const [incidentsLoading, incidentsError, incidentsResults, incidentsRefetch] =\n    useIssues(\"incident\");\n\n  return (\n    <>\n      <Header />\n      <Container>\n        <ComponentsContainer>\n          <Status\n            loading={componentsLoading || incidentsLoading}\n            error={{\n              hasError: componentsError || incidentsError,\n              errors: { componentsError, incidentsError },\n            }}\n            components={componentsResults}\n            refetch={() => {\n              componentsRefetch();\n              incidentsRefetch();\n            }}\n          />\n          <Components\n            loading={componentsLoading}\n            components={componentsResults}\n          />\n        </ComponentsContainer>\n        <Chart loading={incidentsLoading} incidents={incidentsResults} />\n        <Incidents loading={incidentsLoading} incidents={incidentsResults} />\n        <Footer />\n        <Subscribe />\n      </Container>\n    </>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}